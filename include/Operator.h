/*
 * This file is part of Greedy Graph Compression.
 *
 * Greedy Graph Compression is a C++ implementation of a greedy algorithm
 * solving the graph compression problem (GCP). Several snippets are
 * provided in order to introduce the different classes of the project.
 * For details regarding the GCP, see <https://arxiv.org/abs/1807.06874>.
 * 
 * Copyright © 2018 Léonard Panichi
 * (<Leonard.Panichi@gmail.com>)
 * 
 * Greedy Graph Compression is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 * 
 * Greedy Graph Compression is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for
 * more details.
 * 
 * You should have received a copy of the GNU General Public License along
 * with this program. If not, see <http://www.gnu.org/licenses/>.
 */


#pragma once

#include <random>
#include <queue>
#include <algorithm>
#include <iterator>
#include "Checker.h"

// Used by regUnion2
class Compare_reg_size
{
public:
  bool operator() (const std::vector<Rectangle*>* lhs, const std::vector<Rectangle*>* rhs) const
  {
    return lhs->size() > rhs->size();
  }
};

class Operator : public Checker {	
	typedef std::vector<rect_structure> component_storage;
	
	public:
		//Random number generator
	    std::default_random_engine generator;
	    std::uniform_real_distribution<double> uni_r;
	    std::uniform_int_distribution<int> uni_i;
	    std::uniform_int_distribution<int> uni_D;
	    std::vector<std::uniform_int_distribution<int>> uni_reg;
	    std::mt19937 eng;
	    std::vector<Rectangle*> sampled_rects;

	    //For iterating on to_del
	    std::vector<Rectangle*>::iterator k;

	    /****Operations****/
		int dim;						// Dimension being processed
	    int n_gen, n;					// Max number of rectangles generated by the division of a rectangle by an operating rectangle, a number to iterate over these generated rectangles 
	    int pow2d;						// To iterate over the generated rectangles
		int i_d_selector;				// Intersection/Difference selector
		std::vector<double> binomial_p; // Temporary, for finding a rectangle
		
		// Storage for finding operations
		Rectangle *ref_rect;

		// Storage for new rectangles
		Rectangle* new_R;					// New Rectangle
		std::vector<Rectangle*> new_Rs;		// New parts for partition
		std::vector<Rectangle*> new_Rs_total; // Used by Objective class
		rect_structure* rect;				// The operating rectangle
		rect_structure* new_r;				// For building a rectangle

		// Storage used for various task during calculation of new retangles
		std::vector<int> sizeCheck;			// Check size of rectangles being build
		component_storage inter_diffe;		// To store the results of the calculus of intersection of components
	    std::vector<std::vector<int>> n_move; // Used to know when the shared pointer has to be moved (last copy of component)
		// Storage for register intersection calculus
		std::vector<Rectangle*> to_del; 	// Rectangles to be deleted by the operation on the partition
		std::vector<std::vector<Rectangle*>> regUnionResult;	// Store the results of the union of the registers on each dimension
		std::priority_queue<std::vector<Rectangle*>*, std::vector<std::vector<Rectangle*>*>, Compare_reg_size> pq; // For regUnion2

		// Register
		registre del_reg; // To be deleted Rects in a register shape
		registre add_reg; // To be added Rects in a register shape

		int check; // Used by the division

		Operator(std::vector<int> N, std::vector<double> params);
		Operator(std::string input_filename);
		Operator(std::string type, int n);
		Operator(std::vector<int> N);
		Operator();
		~Operator();
		
		void init();
		void setup_registers_and_storage();
		void testRandomNumberGenerator();

		int find_cluster();
		int find_union_constrained();
		int find_division();
		int applyCluster(Rectangle* clust);

		void shuffle_partition(int nope);
		
		void calculate_rectangle();
		void calculate_operation();
		void doCluster();
		void clean_operator();


		void intersection();
		void difference();

		
		void regUnion();
		void regUnion2();
		void regUnion_temp(Rectangle* R);
		void regIntersection();
		void regIntersection_temp();


		void make_del_reg(Rectangle* n);
		void make_add_reg(Rectangle* n);
		void clean_temp_registers();
		void update_registers();


		void print_add_reg();
		void print_del_reg();
		void print_reg_union();
		void print_component_storage(component_storage& inter_diffe);
};

